html,
body,
div,
span,
applet,
object,
iframe,
h1,
h2,
h3,
h4,
h5,
h6,
p,
blockquote,
pre,
a,
abbr,
acronym,
address,
big,
cite,
code,
del,
dfn,
em,
img,
ins,
kbd,
q,
s,
samp,
small,
strike,
strong,
sub,
sup,
tt,
var,
b,
u,
i,
center,
dl,
dt,
dd,
ol,
ul,
li,
fieldset,
form,
label,
legend,
table,
caption,
tbody,
tfoot,
thead,
tr,
th,
td,
article,
aside,
canvas,
details,
embed,
figure,
figcaption,
footer,
header,
hgroup,
menu,
nav,
output,
ruby,
section,
summary,
time,
mark,
audio,
video {
    margin: 0;
    padding: 0;
    border: 0;
    font-size: 100%;
    font: inherit;
    vertical-align: baseline;
}


/* HTML5 display-role reset for older browsers */

article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
menu,
nav,
section {
    display: block;
}

body {
    line-height: 1;
}

ol,
ul {
    list-style: none;
}

blockquote,
q {
    quotes: none;
}

blockquote:before,
blockquote:after,
q:before,
q:after {
    content: '';
    content: none;
}

table {
    border-collapse: collapse;
    border-spacing: 0;
}


/*
    ===================================
    Typography
    ===================================
*/

h1 {
    font-size: 33px;
}


/*
    ===================================
    Grid
    ===================================
*/

:root {
    --grid-rows: 1;
    --grid-cols: 1;
    --background: #ededed;
    --border: #222;
}

#main-container {
    display: grid;
    /* grid-template-rows: 1fr 2fr; */
    grid-template-rows: 16.3rem auto;
    grid-template-columns: repeat(3, 1fr);
}

#grid-container {
    display: grid;
    grid-area: 2/2/3/3;
    max-width: 500px;
    min-height: 500px;
    grid-template-columns: repeat(var(--grid-cols), 1fr);
}


/*
    The issue with my initial grid-item and the re-sizing of the grid was the padding property. The padding was throwning
    it out of whack, the solution to this if I want to stick with using the padding prop. I would have to restrict the size
    that the user is allowed to use and manually style each grid layout. If I simply set a border around each grid-item (like in grid-element)
    the re-sizing no longer becomes and issue, because there is no padding prop that will push the grid outside of the area that it was
    given.
*/

.grid-item {
    display: flex;
    align-items: center;
    border: 1px solid #ddd;
    text-align: center;
}

header {
    grid-area: 1/2/2/3;
    padding-left: 10rem;
}


/*
    ===================================
    Button
    ===================================
*/

button {
    height: 2.5rem;
    width: 10rem;
    grid-area: 1/2/2/3;
    justify-self: center;
    align-self: center;
}